# -*- coding: utf-8 -*-
"""Copy of GMM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nWzFf4xtpkowgZEUW4tGocxtdXBk33eG

# Welcome to Gaussian Mixture Model Notebook!

Below is an example how to apply Gaussian mixture model in a synthetic dataset.
"""

# @title
from IPython.display import IFrame

# Replace 'YOUR_FILE_ID' with the actual file ID from your Google Drive shareable link
pdf_file_id = '1fOqTePYhR5Bk3aPlzI83FqMwZG9teoZM'

# Generate the URL for the PDF using the file ID
pdf_url = f"https://drive.google.com/file/d/{pdf_file_id}/preview"

# Embed the PDF using an <iframe> in your Colab notebook
IFrame(pdf_url, width=600, height=400)

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

RAND_STATE = 123
np.random.seed(RAND_STATE)

# Scatter plots with histograms and normal distributions
def viz(data,mu,sd):
  green = '#40909A'
  orange = '#C76C2B'
  alpha = 0.5
  plt.figure()

  data_min = min(min(data[0]),min(data[1]))
  data_max = max(max(data[0]),max(data[1]))

  # Plot the 1st normal
  x = np.linspace(data_min, data_max, 100)
  p = norm.pdf(x, mu[0], sd[0])
  plt.plot(x, p, linewidth=2,color=green)

  # Plot the 2nd normal
  x = np.linspace(data_min, data_max, 100)
  p = norm.pdf(x, mu[1], sd[1])
  plt.plot(x, p, linewidth=2,color=orange)

  # Plot the histograms
  _ = plt.hist(data[0],bins=10,density=True,color=green,alpha=alpha)
  _ = plt.hist(data[1],bins=10,density=True,color=orange,alpha=alpha)

  # Plot the scatters
  plt.plot(data1,np.zeros(len(data[0])),linestyle='None', marker='o',markersize=10,alpha=alpha,c=green)
  plt.plot(data2,np.zeros(len(data[1])),linestyle='None', marker='o',markersize=10,alpha=alpha,c=orange)

  # Remove the frame (borders)
  ax = plt.gca()
  ax.spines['top'].set_visible(False)
  ax.spines['right'].set_visible(False)

# Generate 1D data from two normal distributions
mu = [1,3]
sd = [.8,.5]
data1 = np.random.normal(mu[0], sd[0], size=100)
data2 = np.random.normal(mu[1], sd[1], size=50)

# Visualize the data generated by the two normal distributions
viz([list(data1)]+[list(data2)],mu,sd)

# Given the generated data, infer the means and the variances
import numpy as np
data = np.expand_dims(list(data1)+list(data2), axis=1)

## GMM
from sklearn.mixture import GaussianMixture
gmm = GaussianMixture(n_components=2, init_params='random_from_data')
gmm.fit(data)
gmm.means_

covariances = gmm.covariances_
covariances

gmm.weights_

print('GMM >>>')
### HW: Complete the code below ###
w1,w2 = 0.35, 0.64# Q1
mu1,mu2 = 3.00, 0.97# Q2
sd1,sd2 = 0.27, 0.79# Q3
#n
print(w1 * norm.pdf(mu1,mu1,sd1) + w2 * norm.pdf(mu2,mu2,sd2))


data1 = np.random.normal(mu1, sd1, size=100)
data2 = np.random.normal(mu2, sd2, size=50)
viz([list(data1)]+[list(data2)], (mu1,mu2), (sd1,sd2)) # Q4